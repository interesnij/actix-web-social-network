============
use diesel::dsl::any;
let mut stack = Vec::new();
for _item in _friends.iter() {
    stack.push(_item.target_user_id);
};
============
.order(schema::chats::id.desc())
============
diesel::delete(blog_images.filter(schema::blog_images::blog.eq(_blog_id)))
  .execute(&_connection)
  .expect("E");
============
let new_tag = NewTagItems{
        tag_id: *tag_id.1,
        service_id: 0,
        tag_created: chrono::Local::now().naive_utc(),
    };
diesel::insert_into(schema::tags_items::table)
    .values(&new_tag)
    .get_result::<TagItems>(&_connection)
    .expect("Error.");
===============
let _blog_id : i32 = *_id;
let _blog = blogs.filter(schema::blogs::id.eq(_blog_id)).load::<Blog>(&_connection).expect("E");
diesel::update(_category)
        .set(schema::blog_categories::blog_count.eq(_category.blog_count - 1))
        .get_result::<BlogCategories>(&_connection)
        .expect("Error.");
================
_post_list_positions
      .into_iter()
      .nth(0)
      .unwrap()
============
pub fn count_communities_ru(&self) -> String {
      use crate::utils::get_count_for_ru;

      return get_count_for_ru(
          self.count_communities(),
          " сообщество".to_string(),
          " сообщества".to_string(),
          " сообществ".to_string(),
      );
  }
===========

///// types
    // 1 стандартный тип пользователя
    // 3 ребенок
    // 7 идентифицированный
    // 6 пославший запрос на идентификацию
    // 11 удаленный стандартный
    // 13 удаленный ребенок
    // 17 удаленный идентифицированный
    // 16 удаленный пославший запрос на идентификацию
    // 21 закрытый стандартный
    // 23 закрытый ребенок
    // 27 закрытый идентифицированный
    // 26 закрытый пославший запрос на идентификацию
    // 31 приостановленный стандартный
    // 33 приостановленный ребенок
    // 37 приостановленный идентифицированный
    // 36 приостановленный пославший запрос на идентификацию
    // 41 закрытый баннером стандартный
    // 43 закрытый баннером ребенок
    // 47 закрытый баннером идентифицированный
    // 46 закрытый баннером пославший запрос на идентификацию

///// perm
    // 1 стандартные полномочия
    // 10 TRAINEE_MODERATOR
    // 13 MODERATOR
    // 16 HIGH_MODERATOR
    // 19 TEAMLEAD_MODERATOR
    // 20 TRAINEE_MANAGER
    // 23 MANAGER
    // 26 HIGH_MANAGER
    // 29 TEAMLEAD_MANAGER
    // 30 ADVERTISER
    // 34 HIGH_ADVERTISER
    // 39 TEAMLEAD_ADVERTISER
    // 40 ADMINISTRATOR
    // 44 HIGH_ADMINISTRATOR
    // 49 TEAMLEAD_ADMINISTRATOR
    // 60 SUPERMANAGER

///// Пол пользоватетеля
    // 'a' Мужик
    // 'b' Баба

///// Оборудование пользоватетеля
    // 'a' Комп
    // 'b' Телефон

///// Язык пользоватетеля
    // 'a' Русский
    // 'b' Английский
